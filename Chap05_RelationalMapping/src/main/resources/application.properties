# WebApplication Type
spring.main.web-application-type=none

# Data Source
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=boot_user
spring.datasource.password=ora123

# JPA 설정
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect


#spring.jpa.hibernate.ddl-auto=validate: 이 옵션은 Hibernate가 애플리케이션 시작 시 데이터베이스 스키마를 유효성 검사할 때 사용됩니다. 스키마의 유효성 검사는 데이터베이스 테이블, 컬럼, 관계 등을 확인하여 스키마와 엔티티 클래스 간의 일치 여부를 확인합니다. 이 옵션을 설정하면 Hibernate는 데이터베이스 스키마를 검사하고 문제가 있을 경우 오류를 발생시킵니다.

#spring.jpa.generate-ddl=false: 이 옵션은 Hibernate에게 애플리케이션 시작 시 데이터베이스 스키마를 자동으로 생성하지 않도록 지시합니다. 스키마 생성을 자동으로 처리하지 않으므로 데이터베이스 테이블과 관련된 변경 사항을 직접 관리해야 합니다. 일반적으로 프로덕션 환경에서는 스키마 생성을 비활성화하는 것이 좋습니다.

#spring.jpa.show-sql=true: 이 옵션을 설정하면 Hibernate는 콘솔에 실행되는 SQL 쿼리를 출력합니다. 이를 통해 개발자는 Hibernate가 실행하는 SQL 문을 확인하여 데이터베이스와의 상호 작용을 디버깅하고 최적화할 수 있습니다.

#spring.jpa.properties.hibernate.format_sql=true: 이 옵션은 Hibernate가 출력하는 SQL 쿼리를 보기 쉽게 포맷팅하여 출력합니다. SQL 쿼리를 읽기 쉽게 만들어 디버깅 및 개발 과정에서 도움을 줍니다.

#spring.jpa.database-platform=org.hibernate.dialect.OracleDialect: 이 옵션은 Hibernate가 사용할 데이터베이스 플랫폼을 지정합니다. 여기서는 Oracle 데이터베이스에 대한 Hibernate의 방언(Dialect)을 설정한 것입니다. Hibernate는 특정 데이터베이스 시스템과 상호 작용하기 위해 방언을 사용합니다. 이를 통해 데이터베이스에 특정한 SQL 구문 및 기능을 사용할 수 있습니다.

